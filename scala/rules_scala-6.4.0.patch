diff --git a/scala/private/phases/phase_default_info.bzl b/scala/private/phases/phase_default_info.bzl
index 3e89fd4..48b5c84 100644
--- a/scala/private/phases/phase_default_info.bzl
+++ b/scala/private/phases/phase_default_info.bzl
@@ -6,6 +6,17 @@
 
 load("@io_bazel_rules_scala//scala/private:rule_impls.bzl", "specified_java_runtime")
 
+# Avoid phase_names.remove() throwing a ValueError when using Bazel >= 8.0.0.
+#
+# - --incompatible_struct_has_no_methods
+# - https://bazel.build/versions/6.2.0/rules/lib/struct#to_json
+# - https://bazel.build/versions/6.2.0/rules/lib/struct#to_proto
+# - https://blog.bazel.build/2021/01/19/bazel-4-0.html#starlark
+# - https://github.com/bazelbuild/bazel/issues/19465
+# - https://github.com/bazelbuild/bazel/commit/8f18d362c852377740cb032b02c42d78b9a44ad0
+# - https://github.com/bazelbuild/bazel/commit/c3dc38960bab385c172ab902f79f1c79ef7099a9
+_DEPRECATED_MEMBERS = ["to_json", "to_proto"]
+
 def phase_default_info(ctx, p):
     executable = None
     files = []
@@ -16,10 +27,7 @@ def phase_default_info(ctx, p):
     if java_runtime:
         runfiles.append(java_runtime.files)
 
-    phase_names = dir(p)
-    phase_names.remove("to_json")
-    phase_names.remove("to_proto")
-    for phase_name in phase_names:
+    for phase_name in [n for n in dir(p) if n not in _DEPRECATED_MEMBERS]:
         phase = getattr(p, phase_name)
 
         if hasattr(phase, "executable"):
diff --git a/third_party/repositories/repositories.bzl b/third_party/repositories/repositories.bzl
index 4232478..26ac28f 100644
--- a/third_party/repositories/repositories.bzl
+++ b/third_party/repositories/repositories.bzl
@@ -77,6 +77,26 @@ def repositories(
     for id in for_artifact_ids:
         _scala_maven_import_external(
             name = id,
+            # Split the last component off of mangled bzlmod repo names to
+            # produce the expected target name. Or else we get output like:
+            #
+            # scala_import(
+            #     name = "_main~scala_deps~io_bazel_rules_scala_scala_compiler",
+            #     jars = ["scala-compiler-2.12.18.jar"],
+            # )
+            #
+            # resulting in errors like:
+            #
+            # ERROR: .../_main~_repo_rules~io_bazel_rules_scala/scala/BUILD:
+            # no such target
+            #   '@@_main~scala_deps~io_bazel_rules_scala_scala_compiler
+            #     //:io_bazel_rules_scala_scala_compiler':
+            # target 'io_bazel_rules_scala_scala_compiler' not declared in
+            # package '' defined by
+            #   .../_main~scala_deps~io_bazel_rules_scala_scala_compiler/BUILD
+            # and referenced by '@@_main~_repo_rules~io_bazel_rules_scala
+            #   //scala:default_toolchain_scala_compile_classpath_provider'
+            generated_rule_name = id.split("~")[-1],
             artifact = artifacts[id]["artifact"],
             artifact_sha256 = artifacts[id]["sha256"],
             licenses = ["notice"],
