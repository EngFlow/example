diff --git a/third_party/repositories/repositories.bzl b/third_party/repositories/repositories.bzl
index 8167516..a84105d 100644
--- a/third_party/repositories/repositories.bzl
+++ b/third_party/repositories/repositories.bzl
@@ -90,6 +90,26 @@ def repositories(
     for id in for_artifact_ids:
         _scala_maven_import_external(
             name = id + suffix,
+            # Split the last component off of mangled bzlmod repo names to
+            # produce the expected target name. Or else we get output like:
+            #
+            # scala_import(
+            #     name = "_main~scala_deps~io_bazel_rules_scala_scala_compiler",
+            #     jars = ["scala-compiler-2.12.18.jar"],
+            # )
+            #
+            # resulting in errors like:
+            #
+            # ERROR: .../_main~_repo_rules~io_bazel_rules_scala/scala/BUILD:
+            # no such target
+            #   '@@_main~scala_deps~io_bazel_rules_scala_scala_compiler
+            #     //:io_bazel_rules_scala_scala_compiler':
+            # target 'io_bazel_rules_scala_scala_compiler' not declared in
+            # package '' defined by
+            #   .../_main~scala_deps~io_bazel_rules_scala_scala_compiler/BUILD
+            # and referenced by '@@_main~_repo_rules~io_bazel_rules_scala
+            #   //scala:default_toolchain_scala_compile_classpath_provider'
+            generated_rule_name = _unmangle_bzlmod_repo_name(id) + suffix,
             artifact = artifacts[id]["artifact"],
             artifact_sha256 = artifacts[id]["sha256"],
             licenses = ["notice"],
@@ -106,6 +126,59 @@ def repositories(
         if suffix and scala_version == SCALA_VERSION:
             _alias_repository(name = id, target = id + suffix)
 
+def _unmangle_bzlmod_repo_name(name):
+    """Return the correct repository name under bzlmod.
+
+    Splits the last component off of mangled bzlmod repo names to produce the
+    expected repo name. Or else we get output like:
+
+        scala_import(
+            name = "_main~scala_deps~io_bazel_rules_scala_scala_compiler",
+            jars = ["scala-compiler-2.12.18.jar"],
+        )
+
+    resulting in errors like:
+
+      ERROR: .../_main~_repo_rules~io_bazel_rules_scala/scala/BUILD:
+      no such target
+        '@@_main~scala_deps~io_bazel_rules_scala_scala_compiler
+          //:io_bazel_rules_scala_scala_compiler':
+      target 'io_bazel_rules_scala_scala_compiler' not declared in
+      package '' defined by
+        .../_main~scala_deps~io_bazel_rules_scala_scala_compiler/BUILD
+      and referenced by '@@_main~_repo_rules~io_bazel_rules_scala
+        //scala:default_toolchain_scala_compile_classpath_provider'
+
+    However, we can't rely on the specific canonical repository name format:
+
+    > Repos generated by extensions have canonical names in the form of
+    > `module_repo_canonical_name~extension_name~repo_name`. For extensions
+    > hosted in the root module, the `module_repo_canonical_name` part is
+    > replaced with the string `_main`. Note that the canonical name format is
+    > not an API you should depend on â€” it's subject to change at any time.
+    >
+    > - https://bazel.build/external/extension#repository_names_and_visibility
+
+    The change to no longer encode module versions in canonical repo names in
+    Bazel 7.1.0 is a recent example of Bazel maintainers altering the format:
+
+    - https://github.com/bazelbuild/bazel/pull/21316
+
+    And the maintainers are about to replace `~` as the delimiter due to build
+    performance issues on Windows:
+
+    - https://github.com/bazelbuild/bazel/issues/22865
+
+    This function assumes the only valid `repo_name` characters are letters,
+    numbers, '_', '-', and '.'. It finds the last character not in this set, and
+    returns the contents of `name` following this character.
+    """
+    for i in range(len(name)-1, -1, -1):
+        c = name[i]
+        if not (c.isalnum() or c in "_-."):
+            return name[i+1:]
+    return name
+
 def _alias_repository_impl(rctx):
     """ Builds a repository containing just two aliases to the Scala Maven artifacts in the `target` repository. """
 
