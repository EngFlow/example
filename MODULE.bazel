"""EngFlow example project"""

module(
    name = "engflow-example",
    version = "0.0.0",
)

http_file = use_repo_rule(
    "@bazel_tools//tools/build_defs/repo:http.bzl",
    "http_file",
)

http_archive = use_repo_rule(
    "@bazel_tools//tools/build_defs/repo:http.bzl",
    "http_archive",
)

# Some file dependencies
http_file(
    name = "emacs",
    sha256 = "1439bf7f24e5769f35601dbf332e74dfc07634da6b1e9500af67188a92340a28",
    urls = [
        "https://storage.googleapis.com/engflow-tools-public/emacs-28.1.tar.gz",
        "https://mirror.its.dal.ca/gnu/emacs/emacs-28.1.tar.gz",
        "https://mirrors.kernel.org/gnu/emacs/emacs-28.1.tar.gz",
    ],
)

http_file(
    name = "ubuntu_20.04_1.3GB",
    sha256 = "5035be37a7e9abbdc09f0d257f3e33416c1a0fb322ba860d42d74aa75c3468d4",
    urls = [
        "https://storage.googleapis.com/engflow-tools-public/ubuntu-20.04.5-live-server-amd64.iso",
        "https://mirror.math.princeton.edu/pub/ubuntu-iso/focal/ubuntu-20.04.5-live-server-amd64.iso",
        "https://mirror.pit.teraswitch.com/ubuntu-releases/focal/ubuntu-20.04.5-live-server-amd64.iso",
    ],
)

# Abseil Python can be imported through pip_import, but it has native Bazel support too.
# bzlmod: https://github.com/abseil/abseil-py/issues/263
http_archive(
    name = "io_abseil_py",
    sha256 = "8a3d0830e4eb4f66c4fa907c06edf6ce1c719ced811a12e26d9d3162f8471758",
    strip_prefix = "abseil-py-2.1.0",
    url = "https://github.com/abseil/abseil-py/archive/refs/tags/v2.1.0.tar.gz",
)

register_toolchains("@rules_scala_protoc_toolchains//:all")

bazel_dep(name = "bazel_skylib", version = "1.7.1")
bazel_dep(name = "engflowapis-java", version = "2025.03.14-12.58.52")
bazel_dep(name = "platforms", version = "0.0.11")
bazel_dep(name = "protobuf", version = "30.2")
single_version_override(
    module_name = "protobuf",
    patch_strip = 1,
    patches = ["//scala:0001-protobuf-19679-rm-protoc-dep.patch"],
    version = "30.2",
)

# Per the instructions from:
# https://github.com/bazelbuild/apple_support?tab=readme-ov-file#bazel-7-setup
#
# If you also depend on `rules_cc`, `apple_support` must come _above_ `rules_cc`
# in your `MODULE.bazel` or `WORKSPACE` file because Bazel selects toolchains
# based on which is registered first.
bazel_dep(name = "apple_support", version = "1.22.0")
bazel_dep(name = "rules_cc", version = "0.1.1")

# https://github.com/googleapis/googleapis/pull/855
# https://github.com/bazelbuild/bazel-central-registry/pull/1699
bazel_dep(
    name = "googleapis",
    version = "0.0.0-20241220-5e258e33.bcr.1",
)
bazel_dep(name = "rules_python", version = "1.4.1")

PYTHON_VERSION = "3.12"

python = use_extension("@rules_python//python/extensions:python.bzl", "python")
python.toolchain(
    is_default = True,
    python_version = PYTHON_VERSION,
)

pip = use_extension("@rules_python//python/extensions:pip.bzl", "pip")
pip.parse(
    hub_name = "pip",
    python_version = PYTHON_VERSION,
    requirements_lock = "//python:requirements_lock.txt",
)
use_repo(pip, "pip")

bazel_dep(name = "rules_proto", version = "7.1.0")
bazel_dep(name = "rules_dotnet", version = "0.18.2")

dotnet = use_extension("@rules_dotnet//dotnet:extensions.bzl", "dotnet")
dotnet.toolchain(dotnet_version = "8.0.200")
use_repo(dotnet, "dotnet_toolchains")

register_toolchains("@dotnet_toolchains//:all")

# https://github.com/bazelbuild/rules_go/blob/master/docs/go/core/bzlmod.md
bazel_dep(name = "rules_go", version = "0.54.0")
bazel_dep(name = "gazelle", version = "0.43.0")

GO_VERSION = "1.24.3"

go_sdk = use_extension("@rules_go//go:extensions.bzl", "go_sdk")
go_sdk.download(version = GO_VERSION)

go_deps = use_extension("@gazelle//:extensions.bzl", "go_deps")
go_deps.from_file(go_mod = "//:go.mod")
use_repo(go_deps, "com_github_google_go_cmp")

bazel_dep(name = "rules_java", version = "8.11.0")

# https://github.com/bazelbuild/rules_jvm_external/blob/master/docs/bzlmod.md
bazel_dep(name = "rules_jvm_external", version = "6.7")
bazel_dep(name = "grpc-java", version = "1.71.0")

# Loads rules required to compile proto files
bazel_dep(name = "rules_proto_grpc", version = "5.0.1")

maven = use_extension("@rules_jvm_external//:extensions.bzl", "maven")
maven.install(
    artifacts = [
        "commons-cli:commons-cli:1.9.0",
        "com.google.oauth-client:google-oauth-client:1.39.0",
        "io.netty:netty-handler:4.1.121.Final",
    ],

    # When updating versions, run `REPIN=1 bazel run @maven//:pin`
    fail_if_repin_required = True,
    lock_file = "//:maven_install.json",
    repositories = [
        "https://repo.maven.apache.org/maven2/",
    ],
    strict_visibility = True,
)
use_repo(maven, "maven")

bazel_dep(name = "rules_kotlin", version = "2.1.4")
bazel_dep(name = "rules_perl", version = "0.4.1")
bazel_dep(name = "rules_swift", version = "2.8.2")
bazel_dep(name = "aspect_rules_ts", version = "3.5.3")

rules_ts_ext = use_extension(
    "@aspect_rules_ts//ts:extensions.bzl",
    "ext",
    dev_dependency = True,
)
rules_ts_ext.deps()
use_repo(rules_ts_ext, "npm_typescript")

bazel_dep(name = "rules_scala", version = "7.0.0")

scala_config = use_extension(
    "@rules_scala//scala/extensions:config.bzl",
    "scala_config",
)
scala_config.settings(scala_version = "2.13.16")

scala_deps = use_extension(
    "@rules_scala//scala/extensions:deps.bzl",
    "scala_deps",
)
scala_deps.scala()
scala_deps.scalatest()

scala_protoc = use_extension(
    "@rules_scala//scala/extensions:protoc.bzl",
    "scala_protoc",
    dev_dependency = True,
)
use_repo(scala_protoc, "rules_scala_protoc_toolchains")

bazel_dep(name = "rules_shell", version = "0.4.1")
